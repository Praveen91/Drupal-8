<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_page_title_form_node_gallery_form_alter(&$form, &$form_state, $form_id) {
	
	$node = $form_state->getFormObject()->getEntity();
	$nodeBundle = $node->bundle();

   if (in_array($form['#form_id'], ['node_gallery_form'])) {
   	  $form['image_pricing'] = [
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Image Pricing'),
      '#prefix' => '<div id="image-pricing-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 99,
    ];

        $volumeFields = $form_state->get('volume_fields');

        if (empty($volumeFields)) {
	      $volumeFields = ($count > 0) ? $count : 1;
	      $form_state->set('volume_fields', $volumeFields);
	    }

	    for ($i = $count; $i < $volumeFields; $i++) {
      $form['image_pricing']['volume-set' . $i] = [
        '#type' => 'fieldset',
        '#title' => 'Option ' . ($i + 1),
        '#tree' => TRUE,
      ];
      $form['image_pricing']['volume-set' . $i]['min'] = [
        '#type' => 'textfield',
        '#title' => 'Min Quantity',
      ];
      $form['image_pricing']['volume-set' . $i]['price'] = [
        '#type' => 'textfield',
        '#title' => 'Price Each',
      ];
    }
 
    $form['image_pricing']['add_item'] = [
      '#type' => 'submit',
      '#value' => t('Add Another Item'),
      '#submit' => ['image_pricing_add_item'],
      '#ajax' => [
        'callback' => 'image_pricing_ajax_callback',
        'wrapper' => 'image-pricing-wrapper',
      ],
    ];
    $form['#entity_builders'][] = 'image_pricing_node_builder';

     }
//kint($node);

}

/**
 * Ajax Callback for the form.
 *
 * @param array $form
 *   The form being passed in
 * @param array $form_state
 *   The form state
 * 
 * @return array
 *   The form element we are changing via ajax
 */
function image_pricing_ajax_callback(&$form, FormStateInterface $form_state) {
  return $form['image_pricing'];
}

/**
 * Functionality for our ajax callback.
 *
 * @param array $form
 *   The form being passed in
 * @param array $form_state
 *   The form state, passed by reference so we can modify
 */
function image_pricing_add_item(&$form, FormStateInterface $form_state) {
  $volumeFields = $form_state->get('volume_fields');
  $form_state->set('volume_fields', ($volumeFields+1));
  $form_state->setRebuild();
}


/**
 * Implements of hook_change_my_name.
 */
function custom_page_title_change_my_name($argu1, $argu2){
  //print_r($argu1); die('pop');
}